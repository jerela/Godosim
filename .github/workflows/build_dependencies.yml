# This workflow builds OpenSim and Godot to make sure that part is done correctly. It doesn't yet test generating images.

name: Build OpenSim and Godot
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
      - automatic-Godot-build

  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  NUM_JOBS: 4
  DEBUG_TYPE: "Release"
  MOCO: "on"
  CORE_BRANCH: "main"

jobs:
  
  Ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04

    steps:
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install --yes build-essential cmake autotools-dev autoconf pkg-config automake libopenblas-dev liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen python3 python3-dev python3-numpy python3-setuptools git libssl-dev libpcre3 libpcre3-dev libpcre2-dev libtool gfortran ninja-build patchelf byacc bison openjdk-8-jdk

    - name: Create directories
      run: mkdir ~/opensim-workspace

    # this step may be useless, as LD_LIBRARY_PATH does not seem to persist between steps
    - name: Set library paths
      run: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/opensim-workspace/opensim-core-dependencies-install/simbody/lib

    - name: Install SWIG
      run: |
        mkdir -p ~/opensim-workspace/swig-source || true && cd ~/opensim-workspace/swig-source
        wget -nc -q --show-progress https://github.com/swig/swig/archive/refs/tags/v4.1.1.tar.gz
        tar xzf v4.1.1.tar.gz && cd swig-4.1.1
        sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache
        make && make -j$NUM_JOBS install  

    - name: Get OpenSim source code
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-source || true
        git -C ~/opensim-workspace/opensim-core-source pull || git clone https://github.com/opensim-org/opensim-core.git ~/opensim-workspace/opensim-core-source
        cd ~/opensim-workspace/opensim-core-source
        git checkout $CORE_BRANCH

    - name: Cache dependencies
      id: cache-dependencies-ubuntu
      uses: actions/cache@v4
      with:
        path: ~/opensim-workspace/opensim-core-dependencies-install/
        key: ${{ runner.os }}-dependencies

    - name: Build OpenSim dependencies
      if: steps.cache-dependencies-ubuntu.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-dependencies-build || true
        cd ~/opensim-workspace/opensim-core-dependencies-build
        cmake ~/opensim-workspace/opensim-core-source/dependencies -DCMAKE_INSTALL_PREFIX=~/opensim-workspace/opensim-core-dependencies-install/ -DSUPERBUILD_ezc3d=on -DOPENSIM_WITH_CASADI=$MOCO
        cmake . -LAH
        cmake --build . --config $DEBUG_TYPE -j$NUM_JOBS

    - name: Cache OpenSim build
      id: cache-opensim-build-ubuntu
      uses: actions/cache@v4
      with:
        path: ~/opensim-workspace/opensim-core-build/
        key: ${{ runner.os }}-opensim-build

    - name: Build OpenSim
      if: steps.cache-opensim-build-ubuntu.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-build || true
        cd ~/opensim-workspace/opensim-core-build
        cmake ~/opensim-workspace/opensim-core-source -G "Unix Makefiles" -DOPENSIM_DEPENDENCIES_DIR=~/opensim-workspace/opensim-core-dependencies-install/ -DBUILD_JAVA_WRAPPING=on -DBUILD_PYTHON_WRAPPING=on -DOPENSIM_C3D_PARSER=ezc3d -DBUILD_TESTING=off -DCMAKE_INSTALL_PREFIX=~/opensim-core -DOPENSIM_INSTALL_UNIX_FHS=off -DSWIG_DIR=~/swig/share/swig -DSWIG_EXECUTABLE=~/swig/bin/swig -DOPENSIM_WITH_CASADI=$MOCO
        cmake . -LAH
        cmake --build . --config $DEBUG_TYPE -j$NUM_JOBS

    - name: Cache OpenSim installation
      id: cache-opensim-install-ubuntu
      uses: actions/cache@v4
      with:
        path: ~/opensim-core/
        key: ${{ runner.os }}-opensim-install

    - name: Install OpenSim
      if: steps.cache-opensim-install-ubuntu.outputs.cache-hit != 'true'
      run: |
        cd ~/opensim-workspace/opensim-core-build
        cmake --install .
        cd ~/opensim-core/bin && echo -e "yes" | ./opensim-install-command-line.sh
    
    # download submodules; note that PAT is no longer required after the submodules go public, and expires in 90 days from its creation

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ SECRETS.PAT_submodules }}

    - name: Install SCons and other Godot build/export dependencies
      run: sudo apt-get install --yes build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev libwayland-dev

    - name: Cache Godot editor binary
      id: cache-godot-editor-binary-ubuntu
      uses: actions/cache@v4
      with:
        path: submodules/godot/bin/godot.linuxbsd.editor.x86_64
        key: ${{ runner.os }}-godot-editor-binary

    - name: Run SCons to build Godot Engine
      if: steps.cache-godot-editor-binary-ubuntu.outputs.cache-hit != 'true'
      run: |
        cd submodules/godot/
        pwd
        scons vsproj=no platform=linuxbsd target=editor custom_modules=../godosim-cpp-modules opensim_install_dir=~/opensim-core

    - name: Cache Godot export template
      id: cache-godot-export-template-ubuntu
      uses: actions/cache@v4
      with:
        path: submodules/godot/bin/godot.linuxbsd.template_release.x86_64
        key: ${{ runner.os }}-godot-export-template
    
    - name: Build Godot export template
      if: steps.cache-godot-export-template-ubuntu.outputs.cache-hit != 'true'
      run: |
        cd submodules/godot/
        scons platform=linuxbsd target=template_release arch=x86_64 vsproj=no custom_modules=../godosim-cpp-modules opensim_install_dir=~/opensim-core

    - name: Print Godot binary files
      run: |
        cd submodules/godot/bin/
        ls

    - name: Store artifact of built export template
      uses: actions/upload-artifact@v4
      with:
        name: linux-export-template
        path: submodules/godot/bin/godot.linuxbsd.template_release.x86_64

    - name: Print shared library locations
      run: |
        cd ~/opensim-core/sdk/lib
        pwd
        ls
        cd ~/opensim-core/sdk/Simbody/lib
        pwd
        ls

    # this will create a binary called "godosim-linux", which will be stored in the step after this one
    - name: Export project into binary
      run: |
        cd submodules/godot/bin/
        chmod +x godot.linuxbsd.editor.x86_64
        cd ../../..
        mkdir godosim-bin
        cd submodules/godosim-project-files
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/opensim-core/sdk/lib
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/opensim-core/sdk/Simbody/lib
        LD_LIBRARY_PATH=$LD_LIBRARY_PATH ../godot/bin/godot.linuxbsd.editor.x86_64 --headless --export-release Linux ../../godosim-bin/godosim-linux

    - name: Store binary
      uses: actions/upload-artifact@v4
      with:
        name: binary-linux
        path: godosim-bin/godosim-linux

    - name: Run the Godosim binary
      run: |
        cd godosim-bin
        chmod +x godosim-linux
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/opensim-core/sdk/lib
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/opensim-core/sdk/Simbody/lib
        LD_LIBRARY_PATH=$LD_LIBRARY_PATH ./godosim-linux

