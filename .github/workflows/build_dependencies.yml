# This workflow builds OpenSim and Godot to make sure that part is done correctly. It doesn't yet test generating images.

name: Build OpenSim and Godot
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
      - automatic-Godot-build
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  
  Ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04

    steps:
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install --yes build-essential cmake autotools-dev autoconf pkg-config automake libopenblas-dev liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen python3 python3-dev python3-numpy python3-setuptools git libssl-dev libpcre3 libpcre3-dev libpcre2-dev libtool gfortran ninja-build patchelf byacc bison openjdk-8-jdk

    - name: Create directories
      run: mkdir ~/opensim-workspace

    - name: Install SWIG
      run: |
        mkdir -p ~/opensim-workspace/swig-source || true && cd ~/opensim-workspace/swig-source
        wget -nc -q --show-progress https://github.com/swig/swig/archive/refs/tags/v4.1.1.tar.gz
        tar xzf v4.1.1.tar.gz && cd swig-4.1.1
        sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache
        make && make -j$NUM_JOBS install  

    - name: Get OpenSim source code
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-source || true
        git -C ~/opensim-workspace/opensim-core-source pull || git clone https://github.com/opensim-org/opensim-core.git ~/opensim-workspace/opensim-core-source
        cd ~/opensim-workspace/opensim-core-source
        git checkout "opensim_451"

    - name: Build OpenSim dependencies
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-dependencies-build || true
        cd ~/opensim-workspace/opensim-core-dependencies-build
        cmake ~/opensim-workspace/opensim-core-source/dependencies -DCMAKE_INSTALL_PREFIX=~/opensim-workspace/opensim-core-dependencies-install/ -DSUPERBUILD_ezc3d=on -DOPENSIM_WITH_CASADI=$MOCO
        cmake . -LAH
        cmake --build . --config $DEBUG_TYPE -j$NUM_JOBS

    - name: Build OpenSim
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-build || true
        cd ~/opensim-workspace/opensim-core-build
        cmake ~/opensim-workspace/opensim-core-source -G"$GENERATOR" -DOPENSIM_DEPENDENCIES_DIR=~/opensim-workspace/opensim-core-dependencies-install/ -DBUILD_JAVA_WRAPPING=on -DBUILD_PYTHON_WRAPPING=on -DOPENSIM_C3D_PARSER=ezc3d -DBUILD_TESTING=off -DCMAKE_INSTALL_PREFIX=~/opensim-core -DOPENSIM_INSTALL_UNIX_FHS=off -DSWIG_DIR=~/swig/share/swig -DSWIG_EXECUTABLE=~/swig/bin/swig -DOPENSIM_WITH_CASADI=$MOCO
        cmake . -LAH
        cmake --build . --config $DEBUG_TYPE -j$NUM_JOBS

    - name: Test OpenSim
      run: |
        cd ~/opensim-workspace/opensim-core-build
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/opensim-workspace/opensim-core-dependencies-install/simbody/lib
        ctest --parallel $NUM_JOBS --output-on-failure

    - name: Install OpenSim
      run: |
        cd ~/opensim-workspace/opensim-core-build
        cmake --install .
        cd ~/opensim-core/bin && echo -e "yes" | ./opensim-install-command-line.sh
    
    # Cache OpenSim once it's installed so we don't have to build it again.
    - name: Cache OpenSim
      id: cache-opensim-ubuntu
      uses: actions/cache@v4
      with:
        path: ~/opensim-core
        key: ${{ runner.os }}-opensim
    
    # Preparatory steps for OpenSim installation as suggested by Copilot.
    - name: Preparatory steps to installing OpenSim
      if: steps.cache-opensim-ubuntu.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-source
        sudo apt-get update && sudo apt-get install -y libopenblas-dev libadolc-dev autoconf coinor-libipopt-dev
    
    # Run OpenSim installation if we don't have OpenSim cached.
    - name: Download OpenSim installation script and run it to install OpenSim
      if: steps.cache-opensim-ubuntu.outputs.cache-hit != 'true'
      run: |
        wget https://raw.githubusercontent.com/opensim-org/opensim-core/refs/heads/main/scripts/build/opensim-core-linux-build-script.sh
        sudo chmod +x opensim-core-linux-build-script.sh
        ./opensim-core-linux-build-script.sh -d "Release" -j 1 -c "opensim_451" -s "off"

    # If we have OpenSim cached, install packages that are required. Without this, building Godot throws an error because libopenblas.so.0 cannot be found. Might be because the OpenSim installation is cached, and while the Opensim install script installs libopenblas-dev, caching the installed OpenSim directory doesn't keep the dependencies. In other words, it's possible that just innstalling libopenblas-dev here is necessary and the other packages are unnecessary, but installing them it very fast so it doesn't meaningfully hurt performance.
    - name: Install libopenblas-dev and add it to environment variables, as well as other packages
      if: steps.cache-opensim-ubuntu.outputs.cache-hit == 'true'
      run: sudo apt-get update && sudo apt-get install --yes build-essential libtool autoconf pkg-config gfortran libopenblas-dev liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen patchelf

    # download submodules; note that PAT is no longer required after the submodules go public, and expires in 90 days from its creation
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ SECRETS.PAT_submodules }}

    # Installs SCons
    - name: Install SCons
      run: python -m pip install scons

    - name: Run SCons to build Godot Engine
      run: |
        cd submodules/godot/
        pwd
        scons --debug=findlibs vsproj=no platform=linuxbsd target=editor custom_modules=../godosim-cpp-modules opensim_install_dir=~/opensim-core

    # TODO: Build export templates, export executable binary, and test run it
