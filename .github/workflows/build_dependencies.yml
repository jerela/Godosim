# This workflow builds OpenSim and Godot to make sure that part is done correctly. It doesn't yet test generating images.

name: Build OpenSim and Godot
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
      - automatic-Godot-build
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  
  Ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04

    steps:
    
    - name: Install Python packages
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Numpy
      run: |
        pip install pip --upgrade
        pip install numpy==1.25
    - name: Install packages
      run: sudo apt-get update && sudo apt-get install --yes build-essential libtool autoconf pkg-config gfortran libopenblas-dev liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen patchelf

    - name: Install SWIG
      run: |
        mkdir ~/swig-source && cd ~/swig-source
        wget https://github.com/swig/swig/archive/refs/tags/v4.1.1.tar.gz
        tar xzf v4.1.1.tar.gz && cd swig-4.1.1
        sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache
        make && make -j4 install

    - name: Build dependencies
      # if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        mkdir $GITHUB_WORKSPACE/dependencies
        mkdir $GITHUB_WORKSPACE/../build_deps
        cd $GITHUB_WORKSPACE/../build_deps
        DEP_CMAKE_ARGS=($GITHUB_WORKSPACE/dependencies -LAH)
        DEP_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        DEP_CMAKE_ARGS+=(-DSUPERBUILD_ezc3d=ON)
        DEP_CMAKE_ARGS+=(-DOPENSIM_WITH_CASADI=ON)
        printf '%s\n' "${DEP_CMAKE_ARGS[@]}"
        cmake "${DEP_CMAKE_ARGS[@]}"
        make --jobs 4

    - name: Checkout OpenSim
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-source
        git -C ~/opensim-workspace/opensim-core-source pull || git clone https://github.com/opensim-org/opensim-core.git ~/opensim-workspace/opensim-core-source
        cd ~/opensim-workspace/opensim-core-source
        git checkout "opensim_451"

    - name: Configure opensim-core
      id: configure
      run: |
        mkdir $GITHUB_WORKSPACE/../build
        cd $GITHUB_WORKSPACE/../build
        OSIM_CMAKE_ARGS=($GITHUB_WORKSPACE -LAH)
        OSIM_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/../opensim-core-install)
        OSIM_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_C3D_PARSER=ezc3d)
        OSIM_CMAKE_ARGS+=(-DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on)
        OSIM_CMAKE_ARGS+=(-DSWIG_DIR=~/swig/share/swig)
        OSIM_CMAKE_ARGS+=(-DSWIG_EXECUTABLE=~/swig/bin/swig)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_INSTALL_UNIX_FHS=OFF)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DOXYGEN_USE_MATHJAX=off)
        # TODO: Update to simbody.github.io/latest
        OSIM_CMAKE_ARGS+=(-DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simbody.github.io/simtk.org/api_docs/simbody/latest/")
        OSIM_CMAKE_ARGS+=(-DCMAKE_CXX_FLAGS="-Werror")
        printf '%s\n' "${OSIM_CMAKE_ARGS[@]}"
        cmake "${OSIM_CMAKE_ARGS[@]}"
        VERSION=`cmake -L . | grep OPENSIM_QUALIFIED_VERSION | cut -d "=" -f2`
        echo $VERSION
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        make --jobs 4

    - name: Test opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        # TODO: Temporary for python to find Simbody libraries.
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/opensim_dependencies_install/simbody/lib
        ctest --parallel 4 --output-on-failure
    
    - name: Install opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        make doxygen
        make --jobs 4 install
        cd $GITHUB_WORKSPACE
        mv $GITHUB_WORKSPACE/../opensim-core-install opensim-core-${{ steps.configure.outputs.version }}
        zip --symlinks --recurse-paths --quiet opensim-core-${{ steps.configure.outputs.version }}-ubuntu22.zip opensim-core-${{ steps.configure.outputs.version }}
        mv opensim-core-${{ steps.configure.outputs.version }} $GITHUB_WORKSPACE/../opensim-core-install

    # Cache OpenSim once it's installed so we don't have to build it again.
    - name: Cache OpenSim
      id: cache-opensim-ubuntu
      uses: actions/cache@v4
      with:
        path: ~/opensim-core
        key: ${{ runner.os }}-opensim
    
    # Preparatory steps for OpenSim installation as suggested by Copilot.
    - name: Preparatory steps to installing OpenSim
      if: steps.cache-opensim-ubuntu.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/opensim-workspace/opensim-core-source
        sudo apt-get update && sudo apt-get install -y libopenblas-dev libadolc-dev autoconf coinor-libipopt-dev
    
    # Run OpenSim installation if we don't have OpenSim cached.
    - name: Download OpenSim installation script and run it to install OpenSim
      if: steps.cache-opensim-ubuntu.outputs.cache-hit != 'true'
      run: |
        wget https://raw.githubusercontent.com/opensim-org/opensim-core/refs/heads/main/scripts/build/opensim-core-linux-build-script.sh
        sudo chmod +x opensim-core-linux-build-script.sh
        ./opensim-core-linux-build-script.sh -d "Release" -j 1 -c "opensim_451" -s "off"

    # If we have OpenSim cached, install packages that are required. Without this, building Godot throws an error because libopenblas.so.0 cannot be found. Might be because the OpenSim installation is cached, and while the Opensim install script installs libopenblas-dev, caching the installed OpenSim directory doesn't keep the dependencies. In other words, it's possible that just innstalling libopenblas-dev here is necessary and the other packages are unnecessary, but installing them it very fast so it doesn't meaningfully hurt performance.
    - name: Install libopenblas-dev and add it to environment variables, as well as other packages
      if: steps.cache-opensim-ubuntu.outputs.cache-hit == 'true'
      run: sudo apt-get update && sudo apt-get install --yes build-essential libtool autoconf pkg-config gfortran libopenblas-dev liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen patchelf

    # download submodules; note that PAT is no longer required after the submodules go public, and expires in 90 days from its creation
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ SECRETS.PAT_submodules }}

    # Installs SCons
    - name: Install SCons
      run: python -m pip install scons

    - name: Run SCons to build Godot Engine
      run: |
        cd submodules/godot/
        pwd
        scons --debug=findlibs vsproj=no platform=linuxbsd target=editor custom_modules=../godosim-cpp-modules opensim_install_dir=~/opensim-core

    # TODO: Build export templates, export executable binary, and test run it
