# This is a basic workflow to help you get started with Actions

name: Build OpenSim and Godot
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  Windows:
    runs-on: windows-2022
    name: Windows 2022

    steps:

    - name: Cache OpenSim
      id: cache-opensim-windows
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/opensim-core
        key: ${{ runner.os }}-opensim

    - name: Run Windows install script
      if: steps.cache-opensim-windows.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Install chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

        # Install Microsoft Visual Studio 2022 Community
        choco install visualstudio2022community -y
        choco install visualstudio2022-workload-nativedesktop -y
        choco install visualstudio2022buildtools -y
        
        # Install cmake 3.23.2
        choco install cmake.install --version 3.23.3 --installargs '"ADD_CMAKE_TO_PATH=System"' -y
        
        # Install git
        choco install git.install -y
        
        # Install dependencies of opensim-core
        choco install python3  -y
        choco install jdk8  -y
        choco install swig  -y --version 4.1.1
        choco install nsis  -y
        py -m pip install numpy
        
        # Refresh choco environment so we can use tools from terminal now.
        $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."   
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        refreshenv
        
        # Clone opensim-core
        chdir ${{ github.workspace }}/opensim-workspace/
        git clone https://github.com/opensim-org/opensim-core.git ${{ github.workspace }}/opensim-workspace/opensim-core-source
        chdir ${{ github.workspace }}/opensim-workspace/opensim-core-source
        git.exe checkout $CORE_BRANCH
        
        # Generate dependencies project and build dependencies using superbuild
        md ${{ github.workspace }}/opensim-workspace/opensim-core-dependencies-build
        chdir ${{ github.workspace }}/opensim-workspace/opensim-core-dependencies-build
        cmake ${{ github.workspace }}/opensim-workspace/opensim-core-source/dependencies/ -G"Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/opensim-workspace/opensim-core-dependencies-install" -DSUPERBUILD_ezc3d:BOOL=on -DOPENSIM_WITH_CASADI:BOOL=$MOCO -DOPENSIM_WITH_TROPTER:BOOL=$MOCO
        cmake . -LAH
        cmake --build . --config $DEBUG_TYPE -- /maxcpucount:$NUM_JOBS
        
        # Generate opensim-core build and build it
        md ${{ github.workspace }}/opensim-workspace/opensim-core-build
        chdir ${{ github.workspace }}/opensim-workspace/opensim-core-build
        $env:CXXFLAGS = "/W0"
        cmake ${{ github.workspace }}/opensim-workspace/opensim-core-source/ -G"Visual Studio 17 2022" -A x64 -DOPENSIM_DEPENDENCIES_DIR="${{ github.workspace }}/opensim-workspace/opensim-core-dependencies-install" -DBUILD_JAVA_WRAPPING=on -DBUILD_PYTHON_WRAPPING=on -DOPENSIM_C3D_PARSER=ezc3d -DBUILD_TESTING=off -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/opensim-core" -DOPENSIM_WITH_CASADI:BOOL=$MOCO -DOPENSIM_WITH_TROPTER:BOOL=$MOCO
        cmake . -LAH
        cmake --build . --config $DEBUG_TYPE -- /maxcpucount:$NUM_JOBS
        cmake --install .
    

    # download submodules; note that PAT is no longer required after the submodules go public, and expires in 90 days
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ SECRETS.PAT_submodules }}

    # Installs SCons
    - name: Install SCons
      run: python -m pip install scons

    - name: Run SCons to build Godot Engine
      run: |
        cd submodules/godot/
        scons shared_library=no vsproj=no platform=linuxbsd target=editor custom_modules=../godosim-cpp-modules opensim_install_dir="opensim-core-${{ steps.configure.outputs.version }}"

  
  Ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04

    steps:

    - name: Cache OpenSim
      id: cache-opensim-ubuntu
      uses: actions/cache@v4
      with:
        path: ~/opensim-core
        key: ${{ runner.os }}-opensim

    - name: Download OpenSim installation script and run it to install OpenSim
      if: steps.cache-opensim-ubuntu.outputs.cache-hit != 'true'
      run: |
        wget https://raw.githubusercontent.com/opensim-org/opensim-core/refs/heads/main/scripts/build/opensim-core-linux-build-script.sh
        sudo chmod +x opensim-core-linux-build-script.sh
        ./opensim-core-linux-build-script.sh -d "Release" -j 2 -c "opensim_451"

    - name: print directory structure
      run: ls

    - name: find OpenSim.h
      run: |
        echo "--- first pwd"
        pwd
        cd ~
        echo "--- pwd after cd ~"
        pwd
        echo "--- ls after cd ~"
        ls
        cd ..
        echo "--- pwd after cd ~/.."
        pwd
        echo "--- ls after cd ~/.."
        ls
        cd ~/opensim-workspace
        echo "--- ls after cd ~/opensim-workspace"
        ls
        cd ~/opensim-core
        echo "--- ls after cd ~/opensim-core"
        ls
        cd ~/opensim-core/sdk
        echo "--- ls after cd ~/opensim-core/sdk"
        ls
        cd ~/opensim-core/sdk/include
        echo "--- ls after cd ~/opensim-core/sdk/include"
        ls
        cd ~/opensim-core/sdk/include/OpenSim
        echo "--- ls after cd ~/opensim-core/sdk/include/OpenSim"
        ls
        find OpenSim.h
        cd ~/opensim-workspace/opensim-core-build
        echo "--- ls after cd ~/opensim-workspace/opensim-core-build"
        ls

    # download submodules; note that PAT is no longer required after the submodules go public, and expires in 90 days
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ SECRETS.PAT_submodules }}

    # Installs SCons
    - name: Install SCons
      run: python -m pip install scons

    - name: Run SCons to build Godot Engine
      run: |
        cd submodules/godot/
        scons shared_library=no vsproj=no platform=linuxbsd target=editor custom_modules=../godosim-cpp-modules opensim_install_dir="home/runner/opensim-core"
